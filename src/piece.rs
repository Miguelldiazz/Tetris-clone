use rand::Rng;

use crate::game;

pub const PIECE_SIZE: usize = 5;

const PIECES: [[[[u8; PIECE_SIZE/*rows*/]; PIECE_SIZE/*columns*/]; 4/*Rrotations*/]; 7/*Types of piece*/] = 
    [   //I-block
        [
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 0, 0],
                [1, 1, 1, 1, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 1, 0, 0],                    
                [0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0]
            ]
        ],
        //J-block
        [
            [
                [0, 0, 0, 0, 0],                    
                [0, 1, 0, 0, 0],
                [0, 1, 1, 1, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 1, 1, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 0, 0],
                [0, 1, 1, 1, 0],
                [0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0],
                [0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0]
            ]
        ],
        //L-block
        [
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 1, 0],
                [0, 1, 1, 1, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 0, 0],
                [0, 1, 1, 1, 0],
                [0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 1, 1, 0, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0]
            ]
        ],
        //O-block
        [
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0]
            ],
        ],
        //S-block
        [
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0],
                [0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 1, 0, 0, 0],
                [0, 1, 1, 0, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 1, 1, 0],
                [0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 1, 0, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0]
            ]
        ],
        //T-block
        [
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 1, 0, 0],
                [0, 1, 1, 1, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 1, 0, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 0, 0],
                [0, 1, 1, 1, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 1, 0, 0],
                [0, 1, 1, 0, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0]
            ]
        ],
        //Z-block
        [
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 0, 0],
                [0, 1, 1, 0, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 1, 0, 0],
                [0, 1, 1, 0, 0],
                [0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 1, 1, 0, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0],                    
                [0, 0, 0, 1, 0],
                [0, 0, 1, 1, 0],
                [0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0]
            ]
        ],
    ];

const STARTING_POSITIONS: [[(i8 /*x position*/, i8 /*y position*/); 4]; 7] = [
    [
        //I-block
        (3, -2),
        (2, -2),
        (3, -2),
        (2, -2),
    ],
    [
        //J-block
        (3, -2),
        (2, -2),
        (3, -2),
        (3, -2),
    ],
    [
        //L-block
        (3, -2),
        (2, -2),
        (3, -2),
        (3, -2),
    ],
    [
        //O-block
        (2, -2),
        (2, -2),
        (2, -2),
        (2, -2),
    ],
    [
        //S-block
        (3, -2),
        (3, -2),
        (3, -2),
        (2, -2),
    ],
    [
        //T-block
        (3, -2),
        (2, -2),
        (3, -2),
        (3, -2),
    ],
    [
        //z-block
        (3, -2),
        (3, -2),
        (3, -2),
        (2, -2),
    ],
];

#[derive(Copy, Clone)]
pub struct Piece {
    form: usize,
    rotation: usize,
    position: (i8, i8),
}

impl Piece {
    pub fn new() -> Piece {
        let mut rng = rand::thread_rng();
        let f = rng.gen_range(0, 7);
        let r = rng.gen_range(0, 4);

        Piece {
            form: f,
            rotation: r,
            position: STARTING_POSITIONS[f as usize][r as usize],
        }
    }

    pub fn get_position(&self) -> (i8, i8) {
        self.position
    }

    pub fn get_block_at(&self, x: usize, y: usize) -> u8 {
        PIECES[self.form][self.rotation][y][x]
    }

    pub fn rotate(&mut self) {
        self.rotation += 1;
        if self.rotation == 4 {
            self.rotation = 0;
        }
    }

    pub fn move_left(&mut self) {
        self.position.0 -= 1;
    }

    pub fn move_right(&mut self) {
        self.position.0 += 1;
    }

    pub fn move_down(&mut self) {
        self.position.1 += 1;
    }

    pub fn move_up(&mut self) {
        self.position.1 -= 1;
    }
}
